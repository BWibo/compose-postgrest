version: "3"

volumes:
  caddy_config:

  caddy_data:
    # external: true

services:
  caddy:
    image: lucaslorentz/caddy-docker-proxy:${CADDY_VERSION:?CADDY_VERSION not set}
    # container_name: caddy
    ports:
      - 80:80
      - 443:443
      # - 2019:2019
    networks:
      - postgrest-backend
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:2019/metrics || exit 1",
        ]
      # interval: 1m30s
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - caddy_data:/data
      - caddy_config:/config
    restart: unless-stopped
    labels:
      caddy.email: "${ADMIN_EMAIL}"
      # Avoids exceeding rate limit for Let's Encrypt certificates
      # Disable to obtain production SSL certificate
      # https://caddyserver.com/docs/automatic-https#testing
      caddy.acme_ca: "https://acme-staging-v02.api.letsencrypt.org/directory"

  ################
  # postgrest-db #
  ################
  postgrest-db:
    container_name: postgrest-db
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_ANON_ROLE=${DB_ANON_ROLE}
      - DB_SCHEMA=${DB_SCHEMA}
    volumes:
      # anything in initdb directory is created in the database
      # see "How to extend this image" section at https://hub.docker.com/r/_/postgres/
      - "./initdb:/docker-entrypoint-initdb.d"
    networks:
      - postgrest-backend
    restart: always

  #############
  # postgrest #
  #############
  postgrest:
    container_name: postgrest
    image: postgrest/postgrest:latest
    # ports:
    #   - "3000:3000"
    # Available environment variables documented here:
    # https://postgrest.org/en/latest/configuration.html#environment-variables
    environment:
      # The standard connection URI format, documented at
      # https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
      - PGRST_DB_URI=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgrest-db:5432/logging
      # The name of which database schema to expose to REST clients
      - PGRST_DB_SCHEMA=${DB_SCHEMA}
      # The database role to use when no client authentication is provided
      - PGRST_DB_ANON_ROLE=${DB_ANON_ROLE}
      # Overrides the base URL used within the OpenAPI self-documentation hosted at the API root path
      - PGRST_OPENAPI_SERVER_PROXY_URI=http://localhost/log
    networks:
      - postgrest-backend
    restart: always
    labels:
      caddy: "${DOMAIN:?DOMAIN not set}"
      caddy.handle_path: "${POSTGREST_SUBPATH:?POSTGREST_SUBPATH not set}/*"
      caddy.handle_path.reverse_proxy: "{{upstreams http 3000}}"
      caddy.redir: "${POSTGREST_SUBPATH:?POSTGREST_SUBPATH not set} ${POSTGREST_SUBPATH:?POSTGREST_SUBPATH not set}/"
    depends_on:
      postgrest-db:
        condition: service_started

  swagger-ui:
    networks:
      - postgrest-backend
    container_name: swagger-ui
    image: swaggerapi/swagger-ui:latest9
    environment:
      - API_URL=https://localhost/log
    restart: always
    labels:
      caddy: "${DOMAIN:?DOMAIN not set}"
      caddy.handle_path: "/swagger/*"
      caddy.handle_path.reverse_proxy: "{{upstreams http 8080}}"
      caddy.redir: "/swagger /swagger/"


networks:
  postgrest-backend:
    driver: bridge
